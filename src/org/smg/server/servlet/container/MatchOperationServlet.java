
package org.smg.server.servlet.container;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.smg.server.database.ContainerDatabaseDriver;
import org.smg.server.servlet.container.GameApi.GameState;
import org.smg.server.servlet.container.GameApi.Operation;
import org.smg.server.util.CORSUtil;
import org.smg.server.util.IDUtil;
import org.smg.server.util.JSONUtil;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.labs.repackaged.org.json.JSONException;
import com.google.appengine.labs.repackaged.org.json.JSONObject;

@SuppressWarnings("serial")
public class MatchOperationServlet extends HttpServlet {
  @Override
  public void doOptions(HttpServletRequest req, HttpServletResponse resp) throws IOException {
    CORSUtil.addCORSHeader(resp);
  }
  
  @Override
  protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException,
      IOException {
    
    CORSUtil.addCORSHeader(resp);
    JSONObject returnValue = new JSONObject();
    // verify matchId
    String mId = req.getPathInfo().substring(1);
    long matchId = 0;
    try {
      matchId = IDUtil.stringToLong(mId);
    } catch (Exception e) {
      ContainerVerification.sendErrorMessage(
          resp, returnValue, ContainerConstants.WRONG_MATCH_ID);
      return;
    }
    if (!ContainerVerification.matchIdVerify(matchId)) {
      ContainerVerification.sendErrorMessage(
          resp, returnValue, ContainerConstants.WRONG_MATCH_ID);
      return;
    }
    // verify playerId
    String pId = String.valueOf(req.getParameter(ContainerConstants.PLAYER_ID));
    long playerId = 0;
    try {
      playerId = IDUtil.stringToLong(pId);
    } catch (Exception e) {
      ContainerVerification.sendErrorMessage(
          resp, returnValue, ContainerConstants.WRONG_PLAYER_ID);
      return;
    }
    if (!ContainerVerification.playerIdVerify(playerId)) {
      ContainerVerification.sendErrorMessage(
          resp, returnValue, ContainerConstants.WRONG_PLAYER_ID);
      return;
    }
    // verify accessSignature
    String accessSignature = req.getParameter(ContainerConstants.ACCESS_SIGNATURE);
    if (!ContainerVerification.accessSignatureVerify(accessSignature, playerId)) {
      ContainerVerification.sendErrorMessage(
          resp, returnValue, ContainerConstants.WRONG_ACCESS_SIGNATURE);
      return;
    }

    // Return the MatchInfo entity info. I don't think this is a good way. The
    // info should be generated by MatchInfo class.
    // TODO
    Entity entity = ContainerDatabaseDriver.getEntityByKey(ContainerConstants.MATCH, matchId);
    Map<String, Object> propsMap = entity.getProperties();
    for (String key : propsMap.keySet()) {
      Object val = propsMap.get(key);
      try {
        returnValue.put(key, val);
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }

    try {
      returnValue.write(resp.getWriter());
    } catch (JSONException e) {
    }
  }

  @SuppressWarnings("unchecked")
  @Override
  protected void doPost(HttpServletRequest req, HttpServletResponse resp)
      throws ServletException, IOException {
    CORSUtil.addCORSHeader(resp);
    // get json string the parse to map
    String json = Utils.getBody(req);
    JSONObject returnValue = new JSONObject();
    if (json != null) {
      Map<String, Object> jsonMap = null;
      try {
        jsonMap = JSONUtil.parse(json);
      } catch (IOException e) {
        ContainerVerification.sendErrorMessage(
            resp, returnValue, ContainerConstants.JSON_PARSE_ERROR);
        return;
      }

      // verify playerIds      
      ArrayList<String> ids = 
          (ArrayList<String>) jsonMap.get(ContainerConstants.PLAYER_IDS);
      List<Long> playerIds = new ArrayList<Long>();
      try {
        playerIds = IDUtil.stringListToLongList(ids);
      } catch (Exception e) {
        ContainerVerification.sendErrorMessage(
            resp, returnValue, ContainerConstants.WRONG_PLAYER_ID);
        return;
      }
      if (!ContainerVerification.playerIdsVerify(playerIds)) {
        ContainerVerification.sendErrorMessage(
            resp, returnValue, ContainerConstants.WRONG_PLAYER_ID);
        return;
      }
      // verify accessSignature
      String accessSignature = String.valueOf(jsonMap.get(ContainerConstants.ACCESS_SIGNATURE));
      if (!ContainerVerification.accessSignatureVerify(accessSignature, playerIds)) {
        ContainerVerification.sendErrorMessage(
            resp, returnValue, ContainerConstants.WRONG_ACCESS_SIGNATURE);
        return;
      }
      // verify matchId
      String mId = req.getPathInfo().substring(1);
      long matchId = 0;
      try {
        matchId = IDUtil.stringToLong(mId);
      } catch (Exception e) {
        ContainerVerification.sendErrorMessage(
            resp, returnValue, ContainerConstants.WRONG_MATCH_ID);
        return;
      }
      if (!ContainerVerification.matchIdVerify(matchId)) {
        ContainerVerification.sendErrorMessage(
            resp, returnValue, ContainerConstants.WRONG_MATCH_ID);
        return;
      }
      // Get entity for MatchInfo from database.
      Entity entity = ContainerDatabaseDriver.getEntityByKey(ContainerConstants.MATCH, matchId);

      List<Object> operations = (List<Object>) jsonMap.get(ContainerConstants.OPERATIONS);

      try {
        MatchInfo mi = MatchInfo.getMatchInfoFromEntity(entity);
        GameState newState = updateMatchInfoByOperations(mi, operations);

        // Write the object back to JSON formation.
        String rtnJsn = new ObjectMapper().writeValueAsString(mi);
        ContainerDatabaseDriver.updateMatchEntity(matchId, Utils.toMap(new JSONObject(rtnJsn)));

        // Response
        String rtnStr = new ObjectMapper().writeValueAsString(newState);
        returnValue.put(ContainerConstants.GAME_STATE, new JSONObject(rtnStr));
      } catch (JSONException e) {
        // This will be reached if there is something wrong with the formation
        // in Entity.
        e.printStackTrace();
      }
    } else {
      ContainerVerification.sendErrorMessage(
          resp, returnValue, ContainerConstants.NO_DATA_RECEIVED);
      return;
    }
    try {
      returnValue.write(resp.getWriter());
    } catch (JSONException e) {
    }
  }

  private GameState updateMatchInfoByOperations(MatchInfo mi, List<Object> operationsMapList) {
    List<Operation> operations = GameStateManager.messageToOperationList(operationsMapList);

    // There is only one history record here.
    // TODO Make sure which one will be the lastest state.
    GameState currentState;
    if (mi.getHistory().size() == 0) {
      // There is not GameState in History. Initial move.
      currentState = new GameState();

      GameStateHistoryItem gshi = new GameStateHistoryItem();
      gshi.setGameState(currentState);

      mi.getHistory().add(gshi);
    } else {
      currentState = mi.getHistory().get(0).getGameState();
    }
    currentState.makeMove(operations);
    return currentState;
  }
}
